// source: proto/godmode.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.godmode.DecomposeTaskRequest', null, global);
goog.exportSymbol('proto.godmode.DecomposeTaskResponse', null, global);
goog.exportSymbol('proto.godmode.ExtractedRequirements', null, global);
goog.exportSymbol('proto.godmode.Subtask', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.godmode.DecomposeTaskRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.godmode.DecomposeTaskRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.godmode.DecomposeTaskRequest.displayName = 'proto.godmode.DecomposeTaskRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.godmode.DecomposeTaskResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.godmode.DecomposeTaskResponse.repeatedFields_, null);
};
goog.inherits(proto.godmode.DecomposeTaskResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.godmode.DecomposeTaskResponse.displayName = 'proto.godmode.DecomposeTaskResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.godmode.ExtractedRequirements = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.godmode.ExtractedRequirements.repeatedFields_, null);
};
goog.inherits(proto.godmode.ExtractedRequirements, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.godmode.ExtractedRequirements.displayName = 'proto.godmode.ExtractedRequirements';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.godmode.Subtask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.godmode.Subtask.repeatedFields_, null);
};
goog.inherits(proto.godmode.Subtask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.godmode.Subtask.displayName = 'proto.godmode.Subtask';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.godmode.DecomposeTaskRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.godmode.DecomposeTaskRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.godmode.DecomposeTaskRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.godmode.DecomposeTaskRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskDescription: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.godmode.DecomposeTaskRequest}
 */
proto.godmode.DecomposeTaskRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.godmode.DecomposeTaskRequest;
  return proto.godmode.DecomposeTaskRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.godmode.DecomposeTaskRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.godmode.DecomposeTaskRequest}
 */
proto.godmode.DecomposeTaskRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.godmode.DecomposeTaskRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.godmode.DecomposeTaskRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.godmode.DecomposeTaskRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.godmode.DecomposeTaskRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string task_description = 1;
 * @return {string}
 */
proto.godmode.DecomposeTaskRequest.prototype.getTaskDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.godmode.DecomposeTaskRequest} returns this
 */
proto.godmode.DecomposeTaskRequest.prototype.setTaskDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.godmode.DecomposeTaskResponse.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.godmode.DecomposeTaskResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.godmode.DecomposeTaskResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.godmode.DecomposeTaskResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.godmode.DecomposeTaskResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    originalTask: jspb.Message.getFieldWithDefault(msg, 1, ""),
    complexity: jspb.Message.getFieldWithDefault(msg, 2, ""),
    estimatedTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    extractedRequirements: (f = msg.getExtractedRequirements()) && proto.godmode.ExtractedRequirements.toObject(includeInstance, f),
    subtasksList: jspb.Message.toObjectList(msg.getSubtasksList(),
    proto.godmode.Subtask.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.godmode.DecomposeTaskResponse}
 */
proto.godmode.DecomposeTaskResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.godmode.DecomposeTaskResponse;
  return proto.godmode.DecomposeTaskResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.godmode.DecomposeTaskResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.godmode.DecomposeTaskResponse}
 */
proto.godmode.DecomposeTaskResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOriginalTask(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setComplexity(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEstimatedTime(value);
      break;
    case 4:
      var value = new proto.godmode.ExtractedRequirements;
      reader.readMessage(value,proto.godmode.ExtractedRequirements.deserializeBinaryFromReader);
      msg.setExtractedRequirements(value);
      break;
    case 5:
      var value = new proto.godmode.Subtask;
      reader.readMessage(value,proto.godmode.Subtask.deserializeBinaryFromReader);
      msg.addSubtasks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.godmode.DecomposeTaskResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.godmode.DecomposeTaskResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.godmode.DecomposeTaskResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.godmode.DecomposeTaskResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOriginalTask();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getComplexity();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEstimatedTime();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getExtractedRequirements();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.godmode.ExtractedRequirements.serializeBinaryToWriter
    );
  }
  f = message.getSubtasksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.godmode.Subtask.serializeBinaryToWriter
    );
  }
};


/**
 * optional string original_task = 1;
 * @return {string}
 */
proto.godmode.DecomposeTaskResponse.prototype.getOriginalTask = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.godmode.DecomposeTaskResponse} returns this
 */
proto.godmode.DecomposeTaskResponse.prototype.setOriginalTask = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string complexity = 2;
 * @return {string}
 */
proto.godmode.DecomposeTaskResponse.prototype.getComplexity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.godmode.DecomposeTaskResponse} returns this
 */
proto.godmode.DecomposeTaskResponse.prototype.setComplexity = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 estimated_time = 3;
 * @return {number}
 */
proto.godmode.DecomposeTaskResponse.prototype.getEstimatedTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.godmode.DecomposeTaskResponse} returns this
 */
proto.godmode.DecomposeTaskResponse.prototype.setEstimatedTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional ExtractedRequirements extracted_requirements = 4;
 * @return {?proto.godmode.ExtractedRequirements}
 */
proto.godmode.DecomposeTaskResponse.prototype.getExtractedRequirements = function() {
  return /** @type{?proto.godmode.ExtractedRequirements} */ (
    jspb.Message.getWrapperField(this, proto.godmode.ExtractedRequirements, 4));
};


/**
 * @param {?proto.godmode.ExtractedRequirements|undefined} value
 * @return {!proto.godmode.DecomposeTaskResponse} returns this
*/
proto.godmode.DecomposeTaskResponse.prototype.setExtractedRequirements = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.godmode.DecomposeTaskResponse} returns this
 */
proto.godmode.DecomposeTaskResponse.prototype.clearExtractedRequirements = function() {
  return this.setExtractedRequirements(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.godmode.DecomposeTaskResponse.prototype.hasExtractedRequirements = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Subtask subtasks = 5;
 * @return {!Array<!proto.godmode.Subtask>}
 */
proto.godmode.DecomposeTaskResponse.prototype.getSubtasksList = function() {
  return /** @type{!Array<!proto.godmode.Subtask>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.godmode.Subtask, 5));
};


/**
 * @param {!Array<!proto.godmode.Subtask>} value
 * @return {!proto.godmode.DecomposeTaskResponse} returns this
*/
proto.godmode.DecomposeTaskResponse.prototype.setSubtasksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.godmode.Subtask=} opt_value
 * @param {number=} opt_index
 * @return {!proto.godmode.Subtask}
 */
proto.godmode.DecomposeTaskResponse.prototype.addSubtasks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.godmode.Subtask, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.godmode.DecomposeTaskResponse} returns this
 */
proto.godmode.DecomposeTaskResponse.prototype.clearSubtasksList = function() {
  return this.setSubtasksList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.godmode.ExtractedRequirements.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.godmode.ExtractedRequirements.prototype.toObject = function(opt_includeInstance) {
  return proto.godmode.ExtractedRequirements.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.godmode.ExtractedRequirements} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.godmode.ExtractedRequirements.toObject = function(includeInstance, msg) {
  var f, obj = {
    technologiesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    patternsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    constraintsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.godmode.ExtractedRequirements}
 */
proto.godmode.ExtractedRequirements.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.godmode.ExtractedRequirements;
  return proto.godmode.ExtractedRequirements.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.godmode.ExtractedRequirements} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.godmode.ExtractedRequirements}
 */
proto.godmode.ExtractedRequirements.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTechnologies(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addPatterns(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addConstraints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.godmode.ExtractedRequirements.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.godmode.ExtractedRequirements.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.godmode.ExtractedRequirements} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.godmode.ExtractedRequirements.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTechnologiesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getPatternsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getConstraintsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * repeated string technologies = 1;
 * @return {!Array<string>}
 */
proto.godmode.ExtractedRequirements.prototype.getTechnologiesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.godmode.ExtractedRequirements} returns this
 */
proto.godmode.ExtractedRequirements.prototype.setTechnologiesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.godmode.ExtractedRequirements} returns this
 */
proto.godmode.ExtractedRequirements.prototype.addTechnologies = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.godmode.ExtractedRequirements} returns this
 */
proto.godmode.ExtractedRequirements.prototype.clearTechnologiesList = function() {
  return this.setTechnologiesList([]);
};


/**
 * repeated string patterns = 2;
 * @return {!Array<string>}
 */
proto.godmode.ExtractedRequirements.prototype.getPatternsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.godmode.ExtractedRequirements} returns this
 */
proto.godmode.ExtractedRequirements.prototype.setPatternsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.godmode.ExtractedRequirements} returns this
 */
proto.godmode.ExtractedRequirements.prototype.addPatterns = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.godmode.ExtractedRequirements} returns this
 */
proto.godmode.ExtractedRequirements.prototype.clearPatternsList = function() {
  return this.setPatternsList([]);
};


/**
 * repeated string constraints = 3;
 * @return {!Array<string>}
 */
proto.godmode.ExtractedRequirements.prototype.getConstraintsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.godmode.ExtractedRequirements} returns this
 */
proto.godmode.ExtractedRequirements.prototype.setConstraintsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.godmode.ExtractedRequirements} returns this
 */
proto.godmode.ExtractedRequirements.prototype.addConstraints = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.godmode.ExtractedRequirements} returns this
 */
proto.godmode.ExtractedRequirements.prototype.clearConstraintsList = function() {
  return this.setConstraintsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.godmode.Subtask.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.godmode.Subtask.prototype.toObject = function(opt_includeInstance) {
  return proto.godmode.Subtask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.godmode.Subtask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.godmode.Subtask.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    complexity: jspb.Message.getFieldWithDefault(msg, 3, ""),
    assignedAgent: jspb.Message.getFieldWithDefault(msg, 4, ""),
    agentConfidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    agentReasoning: jspb.Message.getFieldWithDefault(msg, 6, ""),
    dependenciesList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.godmode.Subtask}
 */
proto.godmode.Subtask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.godmode.Subtask;
  return proto.godmode.Subtask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.godmode.Subtask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.godmode.Subtask}
 */
proto.godmode.Subtask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setComplexity(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssignedAgent(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAgentConfidence(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgentReasoning(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addDependencies(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.godmode.Subtask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.godmode.Subtask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.godmode.Subtask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.godmode.Subtask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getComplexity();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAssignedAgent();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAgentConfidence();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getAgentReasoning();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDependenciesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.godmode.Subtask.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.godmode.Subtask} returns this
 */
proto.godmode.Subtask.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.godmode.Subtask.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.godmode.Subtask} returns this
 */
proto.godmode.Subtask.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string complexity = 3;
 * @return {string}
 */
proto.godmode.Subtask.prototype.getComplexity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.godmode.Subtask} returns this
 */
proto.godmode.Subtask.prototype.setComplexity = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string assigned_agent = 4;
 * @return {string}
 */
proto.godmode.Subtask.prototype.getAssignedAgent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.godmode.Subtask} returns this
 */
proto.godmode.Subtask.prototype.setAssignedAgent = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional float agent_confidence = 5;
 * @return {number}
 */
proto.godmode.Subtask.prototype.getAgentConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.godmode.Subtask} returns this
 */
proto.godmode.Subtask.prototype.setAgentConfidence = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional string agent_reasoning = 6;
 * @return {string}
 */
proto.godmode.Subtask.prototype.getAgentReasoning = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.godmode.Subtask} returns this
 */
proto.godmode.Subtask.prototype.setAgentReasoning = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated string dependencies = 7;
 * @return {!Array<string>}
 */
proto.godmode.Subtask.prototype.getDependenciesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.godmode.Subtask} returns this
 */
proto.godmode.Subtask.prototype.setDependenciesList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.godmode.Subtask} returns this
 */
proto.godmode.Subtask.prototype.addDependencies = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.godmode.Subtask} returns this
 */
proto.godmode.Subtask.prototype.clearDependenciesList = function() {
  return this.setDependenciesList([]);
};


goog.object.extend(exports, proto.godmode);
